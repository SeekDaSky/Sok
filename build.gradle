/*
    The build process for Sok is copied from the kotlinx.coroutines one (https://github.com/Kotlin/kotlinx.coroutines)
    
    Each platform have its own compile file named compile-{platform}.gradle in the gradle folder. Additional gradle
    files are present for the testing on node.js and de deployment on Bintray
    
    For some reason the native platform is not correctly uploaded to Bintray and must be uploaded manually
 */


// Load repositories and build plugins
buildscript {
   
    repositories {
        mavenCentral()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://jetbrains.bintray.com/kotlin-native-dependencies" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-native-gradle-plugin:$kotlin_native_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomicFU_version"
        classpath "com.moowork.gradle:gradle-node-plugin:$gradle_node_version"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}


// Make all projects use the same repositories
allprojects {
    repositories {
        jcenter()
        mavenCentral()
	    maven { url "https://kotlin.bintray.com/kotlinx" }
    }
}

// Helper function to import correct build files
static def platformOf(project) {
    if (project.name.endsWith("-common")) return "common"
    if (project.name.endsWith("-js")) return "js"
    if (project.name.endsWith("-linux")) return "linux"
    return "jvm"
}

// Apply compile build files to subprojects
configure(subprojects.findAll()) {
    def platform = platformOf(it)
    apply from: rootProject.file("gradle/compile-${platform}.gradle")
}

// Reconfigure source sets to avoid long "src/main/kotlin"
configure(subprojects.findAll()) {
    sourceSets {
        main.kotlin.srcDirs = ['src']
        test.kotlin.srcDirs = ['test']
    }
}

// Configure the "expectedBy" statement
configure(subprojects.findAll()) {
    if(it.name != "sok-common"){
        dependencies {
                expectedBy project(':sok-common')
        }
    }
}

// Suppress warnings for experimental features
configure(subprojects.findAll()) {

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.ExperimentalUnsignedTypes",
                                            "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                                            "-Xuse-experimental=kotlin.Experimental"]

    }
}

// Apply basic plugin
apply plugin: 'base'

// Configure the "clean" task
clean.dependsOn gradle.includedBuilds.collect { it.task(':clean') }


configure(subprojects.findAll()) {
    apply from: rootProject.file('gradle/publish-bintray.gradle')
}

// main deployment task
task deploy(dependsOn: getTasksByName("bintrayUpload", true))

//dokka

apply plugin: 'org.jetbrains.dokka'

def makeLinkMapping(dokka, projectDir) {
    dokka.linkMapping {
        def relPath = rootProject.projectDir.toPath().relativize(projectDir.toPath())
        dir = "$projectDir/src"
        url = "https://github.com/SeekDaSky/Sok/tree/master/$relPath/src"
        suffix = "#L"
    }
}

dokka {
    outputFormat = 'jekyll'
    includeNonPublic = false
    includes = ['PACKAGES.md']
    // map for JS, Native, and Common sources
    makeLinkMapping(it, rootProject.file("common/$project.name-common"))
    makeLinkMapping(it, rootProject.file("jvm/$project.name-jvm"))
    makeLinkMapping(it, rootProject.file("js/$project.name-js"))
    makeLinkMapping(it, rootProject.file("native/$project.name-native-linux"))
    // source roots
    impliedPlatforms = ['JVM', 'JS', 'Native', 'Common']
    sourceRoot {
        path = rootProject.file("common/$project.name-common/src")
        platforms = ['Common']
    }
    sourceRoot {
        path = rootProject.file("jvm/$project.name-jvm/src")
        platforms = ['JVM']
    }
    sourceRoot {
        path = rootProject.file("js/$project.name-js/src")
        platforms = ['JS']
    }
    sourceRoot {
        path = rootProject.file("native/$project.name-native-linux/src")
        platforms = ['Native']
    }

    packageOptions {
        prefix = "Sok.Internal"
        suppress = true
    }
}